chars = a | b | c | d | ... | Z | chars chars
string = "" | "chars" | 'chars'

num_chars: 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | num_chars num_chars
ALGEBRA_OP = + | - | * | /
num: num_chars | num_chars . num_chars | num_chars ALGEBRA_OP num_chars

LOG_OP:=  OR, AND
NUM_LOG_OP: > | >= | < | <= | == | !=
logic_exp = True | False | logic_exp LOG_OP logic_exp | num NUM_LOG_OP num 


list_exp: exp | exp , exp
list: [] | [list_elem] 

exp: string | num | logical_exp | list | (exp) | None | function_call

comment: #chars

body: command | exp | comment 

command: chars = exp | ; | \n |  if (logic_exp): body elif (logic_exp): body else: body | while(logic_exp): body | for chars in list: body  | print exp | command command

function_def: def chars(list_exp): body return exp | function_def function_def 

function_call: chars(list_exp)

program: function_def body | body | body function_def body 